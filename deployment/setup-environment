#!/bin/bash

# -------------------------------------------------------------------------------------------
#                                 Setup all the Variables and Paths
# -------------------------------------------------------------------------------------------
echo "------------------------------------ VARIABLES ----------------------------------------"

# Establish the base repository reference directory
THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
REPOSITORY_DIR="$( dirname $THIS_DIR )"

echo "THIS_DIR=$THIS_DIR"
echo "REPOSITORY_DIR=$REPOSITORY_DIR"

# Setup our local directory
CACHE_DIR="$REPOSITORY_DIR/.cache"
if [ ! -d $CACHE_DIR ]; then
    mkdir $CACHE_DIR
fi

REQUIREMENTS_FILE="$REPOSITORY_DIR/requirements.txt"
INITIALIZED_FILE="$CACHE_DIR/initialized"
VIRTUAL_ENV_DIR="$REPOSITORY_DIR/.venv"

ACTIVATE_SCRIPT="$VIRTUAL_ENV_DIR/bin/activate"

AKIT_COMMAND_SCRIPT="$REPOSITORY_DIR/packages/akit/cli/akitcommand.py"

echo "VIRTUAL_ENV_DIR=$REPOSITORY_DIR"

DEV_ENV_FILE="$CACHE_DIR/development.env"
if [ ! -f $DEV_ENV_FILE ]; then
    REPOSITORY_NAME="Automation Kit"
    REPOSITORY_DIRECTORY="$REPOSITORY_DIR"
    REPORT_PREFIX="akit"
    DEVELOPER_MODE="TRUE"
    PYTHONPATH="$REPOSITORY_DIRECTORY/packages:$REPOSITORY_DIRECTORY/service"
fi
echo "---------------------------------------------------------------------------------------"

# -------------------------------------------------------------------------------------------
#                                 Perform Reset if Required
# -------------------------------------------------------------------------------------------

if [ "$1" == "reset" ]; then
    rm -fr $VIRTUAL_ENV_DIR
    rm -f $INITIALIZED_FILE
fi

# -------------------------------------------------------------------------------------------
#                                 Create the Virtual Environment
# -------------------------------------------------------------------------------------------
echo
echo
echo "---------------------------- VIRTUAL ENVIRONMENT CREATION -----------------------------"
if [ ! -f $INITIALIZED_FILE ]; then

    virtualenv -p python3.8 $VIRTUAL_ENV_DIR

    if [ -f $VIRTUAL_ENV_DIR/bin/activate ]; then
        source $VIRTUAL_ENV_DIR/bin/activate

        # MSCODE Environment Dependencies
        pip install pylint

        # Install pylint into the virtual environment
        pip install coverage
        pip install netifaces
        pip install paramiko
        pip install psycopg2
        pip install requests
        pip install sqlalchemy
        pip install sqlalchemy_utils
        pip install ssdp

        # Website and REST service dependencies
        pip install gunicorn
        pip install werkzeug
        pip install jinja2
        pip install flask
        pip install flask-migrate
        pip install flask-restx

        # git repository dependencies
        if [ -f $REPO_REQUIREMENTS_FILE ]; then
                pip install -r $REPO_REQUIREMENTS_FILE
        else
                pip install git+https://github.com/automationmojo/automationkit.git
        fi

        # Install dependencies into the virtual environment
        pip install -r $REQUIREMENTS_FILE

        touch $INITIALIZED_FILE

        # Exit the virtual environment
        deactivate
    else
        echo "ERROR: Unable to create or find the python virtual environment"
    fi
else
    echo "Virtual environment already intialized..."
fi

echo "---------------------------------------------------------------------------------------"
