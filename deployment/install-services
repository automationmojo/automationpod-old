#!/bin/bash

# -------------------------------------------------------------------------------------------
#                                 Setup all the Variables and Paths
# -------------------------------------------------------------------------------------------
echo "------------------------------------ VARIABLES ----------------------------------------"
# Establish the base repository reference directory
THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
REPOSITORY_DIR="$( dirname $THIS_DIR )"

export INSTALL_DIR_SYSTEMD="/etc/systemd/system"
export VIRTUAL_ENV_DIR="/home/www/apod/venv"

export INSTALL_DIR="/var/www/apod"
export INITIALIZED_FILE="$INSTALL_DIR/initialized"
export VIRTUAL_ENV_DIR="$INSTALL_DIR/venv"

echo "THIS_DIR=$THIS_DIR"
echo "REPOSITORY_DIR=$REPOSITORY_DIR"
echo
echo "INSTALL_DIR=$INSTALL_DIR"
echo "INSTALL_DIR_SYSTEMD=$INSTALL_DIR_SYSTEMD"
echo "VIRTUAL_ENV_DIR=$VIRTUAL_ENV_DIR"


echo "---------------------------------------------------------------------------------------"
# -------------------------------------------------------------------------------------------
#                                 Perform Reset if Required
# -------------------------------------------------------------------------------------------

if [ "$1" == "reset" ]; then
    rm -fr $VIRTUAL_ENV_DIR
    rm -f $INITIALIZED_FILE
fi

# -------------------------------------------------------------------------------------------
#                                 System Package Installation
# -------------------------------------------------------------------------------------------
echo
echo
echo "-------------------------------- SYSTEM PACKAGES --------------------------------------"

function ensure_apt_dependencies() {
    echo "INSTALLING: $1"
    read -a dependency_list <<< $1 # Split the dependency string on spaces into a bash array

    for nxt_dep in "${dependency_list[@]}"
    do
        PCHK_OUTPUT="$(dpkg -s $nxt_dep)";
        if [ "$(echo $?)" != 0 ]; then
            echo "System Dependency ($nxt_dep): being installed"
            sudo apt install $APT_DEPENDENCIES
        else
            echo "System Dependency ($nxt_dep): already installed"
        fi
    done
}

function ensure_system_dependencies () {
    dependencies=$1
    # Split off the system dependency install base on system type Linux, MacOS, Windows, etc

    # For now we only support Linux
    ensure_apt_dependencies "$dependencies"
}

# Run the dependency checks on the system
echo "BASE DEPENDENCIES:"
APT_BASE_DEPENDENCIES="build-essential python3.7 python3.7-dev python3-setuptools python3-pip virtualenv"
ensure_system_dependencies "$APT_BASE_DEPENDENCIES"
echo

echo "POSTGRESQL DEPENDENCIES"
POSTGRESQL_DEPENDENCIES="postgresql postgresql-contrib libgmp3-dev libpq-dev"
ensure_system_dependencies "$POSTGRESQL_DEPENDENCIES"
echo
echo "---------------------------------------------------------------------------------------"

# -------------------------------------------------------------------------------------------
#                                 Create the Virtual Environment
# -------------------------------------------------------------------------------------------
echo
echo
echo "---------------------------- VIRTUAL ENVIRONMENT CREATION -----------------------------"
if [ ! -f $INITIALIZED_FILE ]; then

    virtualenv -p python3.7 $VIRTUAL_ENV_DIR

    source $VIRTUAL_ENV_DIR/bin/activate

    # Install pylint into the virtual environment
    pip install coverage
    pip install netifaces
    pip install paramiko
    pip install psycopg2
    pip install requests
    pip install sqlalchemy
    pip install sqlalchemy_utils
    pip install ssdp

    # Website and REST service dependepincies
    pip install gunicorn
    pip install werkzeug==0.16.1
    pip install flask
    pip install flask-restplus

    # git repository dependencies
    pip install git+https://github.com/myronww/automationkit.git

    # Install dependencies into the virtual environment
    pip install -r $REQUIREMENTS_FILE

    touch $INITIALIZED_FILE

    # Exit the virtual environment
    deactivate
else
    echo "Virtual environment already intialized..."
fi

echo "---------------------------------------------------------------------------------------"


# Install the PgAdmin4 service
DIR_PGADMIN4_SERVICE_SOURCE="$REPOSITORY_DIR/deployment/services/pgadmin4"

FILE_PGADMIN4_SERVICE_CONFIG_SOURCE="$DIR_PGADMIN4_SERVICE_SOURCE/pgadmin4.service"
FILE_PGADMIN4_SERVICE_CONFIG_DEST="$INSTALL_DIR_SYSTEMD/pgadmin4.service"

cp $FILE_PGADMIN4_SERVICE_CONFIG_SOURCE $FILE_PGADMIN4_SERVICE_CONFIG_DEST
chmod +x $FILE_PGADMIN4_SERVICE_CONFIG_DEST



